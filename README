# üöá MicroPython Transit Monitor

A modular, memory-optimized real-time transit monitoring system for ESP32 with TFT display and cellular connectivity. Originally designed for NYC MTA subway lines but adaptable to any transit API.

![ESP32 Transit Monitor](https://img.shields.io/badge/Platform-ESP32-blue) ![MicroPython](https://img.shields.io/badge/Language-MicroPython-green) ![License](https://img.shields.io/badge/License-MIT-yellow)

## ‚ú® Features

- **Real-time Transit Data**: Fetches live subway status from transit API
- **TFT Display**: Scrolling text display with line-specific colors
- **Cellular Connectivity**: PPP connection for internet access
- **Memory Optimized**: Lazy loading and garbage collection for stable operation
- **Hardware Controls**: Button interrupts for line switching
- **Caching**: Smart caching reduces API calls and improves responsiveness
- **Modular Design**: Clean separation of concerns across modules

## üöÄ Demo

The system cycles through configured transit lines (F and R trains by default), displaying:
- Real-time service status
- Service alerts and planned work
- Delays and service changes
- Automatic line switching with manual override

## üìã Hardware Requirements

- **ESP32** development board
- **TFT Display** (configured for s3lcd library)
- **Cellular Modem** with PPP support
- **Push Button** for line switching
- **Status LED**

### Pin Configuration
```python
PINS = {
    'led': 2,           # Status LED
    'button1': 0        # Line switch button
}

PPP_CONFIG = {
    'uart_id': 1,       # UART for cellular modem
    'tx_pin': 44,       # TX pin
    'rx_pin': 43,       # RX pin
    'baudrate': 9600
}
```

## üõ†Ô∏è Installation

### 1. Flash MicroPython
Flash MicroPython firmware to your ESP32 device.

### 2. Install Required Libraries
```bash
# Install s3lcd for TFT display support
# Install any additional MicroPython libraries your hardware requires
```

### 3. Upload Code
Upload all Python files to your ESP32:

```bash
# Using ampy, mpremote, or your preferred tool
ampy -p /dev/ttyUSB0 put config.py
ampy -p /dev/ttyUSB0 put display_manager.py
ampy -p /dev/ttyUSB0 put ppp_manager.py
ampy -p /dev/ttyUSB0 put transit_client.py
ampy -p /dev/ttyUSB0 put hardware_manager.py
ampy -p /dev/ttyUSB0 put utils.py
ampy -p /dev/ttyUSB0 put smain.py
```

### 4. Configure Settings
Edit `config.py` to match your setup:

```python
# Transit API endpoint
SERVICE_URL = "http://your-transit-api:5000"

# Hardware pins
PINS = {
    'led': 2,
    'button1': 0
}

# Transit lines to monitor
TRANSIT_LINES = ['F', 'R']  # Customize for your needs
```

### 5. Run
```python
# On ESP32 REPL
import smain
# Application will start automatically
```

## üìÅ Project Structure

```
‚îú‚îÄ‚îÄ smain.py              # Main application orchestrator
‚îú‚îÄ‚îÄ config.py             # Configuration constants
‚îú‚îÄ‚îÄ display_manager.py    # TFT display operations
‚îú‚îÄ‚îÄ ppp_manager.py        # Cellular connectivity
‚îú‚îÄ‚îÄ transit_client.py     # API client with caching
‚îú‚îÄ‚îÄ hardware_manager.py   # Button/LED control
‚îú‚îÄ‚îÄ utils.py             # Utility functions
‚îî‚îÄ‚îÄ README.md            # This file
```

## üîß Configuration

### Transit Lines
Add or modify monitored lines in `config.py`:
```python
TRANSIT_LINES = ['F', 'R', '4', '5', '6']  # Add any lines

# Line colors (MTA official colors)
SUBWAY_LINE_COLORS = {
    'F': 'ORANGE',
    'R': 'YELLOW',  
    '4': 'GREEN',
    # Add custom mappings
}
```

### Timing Settings
```python
TIMING = {
    'line_display_duration': 10,  # Seconds per line
    'startup_delay': 2,
    'interrupt_debounce_ms': 500
}
```

### Memory Management
```python
MEMORY_CONFIG = {
    'low_memory_threshold': 10000,
    'gc_interval': 10,           # Garbage collect every N cycles
    'max_text_length': 200       # Truncate long messages
}
```

## üéÆ Usage

### Normal Operation
- System automatically cycles through configured transit lines
- Each line displays for 10 seconds (configurable)
- Real-time status updates with color-coded information

### Manual Control
- **Button Press**: Switch to next line immediately
- **Automatic Recovery**: PPP reconnection, service health monitoring
- **Memory Management**: Automatic garbage collection and cache management

### Status Indicators
- **LED**: Heartbeat blink for normal operation
- **Display Colors**:
  - üü¢ Green: Good service, successful operations
  - üü° Yellow: Delays, warnings, cached data
  - üî¥ Red: Service issues, errors
  - üîµ Blue: Headers, system status
  - üü† Orange: F train (line-specific colors)

## üß™ Testing

The system includes comprehensive testing functions:

```python
# Test individual components
import smain

smain.test_display()      # Test TFT display
smain.test_ppp()         # Test cellular connectivity  
smain.test_memory()      # Check memory usage
smain.test_full_system() # Test all modules
```

### Module Testing
```python
# Test transit API
from transit_client import quick_line_test
quick_line_test('F')

# Test hardware
from hardware_manager import quick_led_test
quick_led_test()
```

## üîß API Integration

The system expects a REST API with these endpoints:

```
GET /health                    # Service health check
GET /transit/line/{line_id}    # Line-specific data
GET /transit/status           # General status
GET /transit/alerts           # System alerts
```

### Expected API Response Format
```json
{
  "train": "F TRAIN",
  "status": "Good Service",
  "last_updated": "2024-01-15T14:30:25",
  "active_trips": 45,
  "active_alerts": 0,
  "delays": [],
  "service_changes": [],
  "planned_work": []
}
```

## ‚ö° Performance Features

### Memory Optimization
- **Lazy Loading**: Modules loaded only when needed
- **Garbage Collection**: Automatic memory management
- **Cache Limits**: Bounded cache size with LRU eviction
- **Text Truncation**: Long messages automatically shortened

### Network Efficiency
- **Smart Caching**: 30-second cache timeout reduces API calls
- **Connection Reuse**: Persistent PPP connection with auto-reconnect
- **Error Recovery**: Graceful degradation with stale data fallback

### Display Optimization
- **Smooth Scrolling**: Pixel-by-pixel scrolling animation
- **Header Protection**: Headers remain visible during content updates
- **Word Wrapping**: Automatic text wrapping for long messages

## üõ°Ô∏è Error Handling

The system includes comprehensive error handling:

- **Network Failures**: Automatic PPP reconnection with exponential backoff
- **API Errors**: Graceful fallback to cached data
- **Hardware Issues**: Soft failures with console fallback
- **Memory Exhaustion**: Automatic garbage collection and cache cleanup

## üîç Debugging

### Console Output
All modules provide console logging even when display is unavailable:
```python
# Enable verbose logging
from utils import print_memory_status
print_memory_status()

# Get system information
info = utils.get_system_info()
print(info)
```

### Status Monitoring
```python
# Check component status
if ppp:
    print(ppp.get_status(detailed=True))
    
if transit:
    print(transit.get_client_stats())
```

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## üìù Customization Examples

### Adding New Transit Lines
```python
# In config.py
TRANSIT_LINES = ['F', 'R', '4', '5', '6', 'L']

SUBWAY_LINE_COLORS = {
    'L': 'WHITE',  # Add new line color
    # ... existing colors
}
```

### Custom Display Messages
```python
# Create custom display callback
def custom_display(text, color):
    # Add timestamp or custom formatting
    timestamp = time.time()
    formatted = f"[{timestamp}] {text}"
    display.show_text(formatted, color)
```

### Extended API Integration
```python
# Add weather or other data sources
def fetch_weather_data():
    # Your weather API integration
    return weather_data

# Integrate into main loop
def enhanced_display():
    show_line_status(current_line)
    if cycle_count % 20 == 0:  # Every 20 cycles
        show_weather_data()
```

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- MicroPython community for the excellent embedded Python implementation
- NYC MTA for providing transit data APIs
- ESP32 community for hardware support and libraries

## üìû Support

If you encounter issues:

1. Check the console output for error messages
2. Verify your `config.py` settings match your hardware
3. Test individual modules using the provided test functions
4. Open an issue with detailed error logs and configuration

---

**Built with ‚ù§Ô∏è for real-time transit information**
